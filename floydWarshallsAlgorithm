def floyd(graph):
    m = len(graph)
    prev = [row[:] for row in graph]
    dist = [row[:] for row in graph]
    for k in range(m):
        for u in range(m):
            for v in range(m):
                if dist[u][k] + dist[k][v] < dist[u][v]:
                    dist[u][v] = dist[u][k]+dist[k][v]
                    prev[u][v] = prev[k][v]
    return dist, prev

graph = [
    [0, 5, float('inf'), 2],
    [float('inf'), 0, 7, float('inf')],
    [float('inf'), float('inf'), 0, 1],
    [float('inf'), float('inf'), float('inf'), 0]
]

distances, predecessors = floyd(graph)

print("Distances matrix:")
for row in distances:
    print(row)

print("\nPredecessors matrix:")
for row in predecessors:
    print(row)

#O(V^3)
