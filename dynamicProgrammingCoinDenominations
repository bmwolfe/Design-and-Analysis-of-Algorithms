#coin denominations
#uses various coin denominations
#find best number of coins (lowest)

memo = {} #O(n) space: holding all results for n values

def coin_change(n, coins):
    if n in memo:
        return memo[n]
        
    if n == 0:
        return 0

    if n < 0:
        return -1
        
    best = float('inf')

    for k in coins:
        if n - k >= 0:
            res = 1 + coin_change(n-k, coins)
            #O(k*n) time: k coins/function calls, each of which take O(n) time if no values are in the memo
            #O(n) space: based on the worst possible case of having a recursion depth of n
            if res < best:
                best = res
    memo[n] = best
    
    return best


#Tests

#coins = [1, 5, 10, 25]
#coins = [2, 5, 15]
coins = [1, 6, 13, 20]
#coins = [2,6]

if coin_change(7, coins) == float('inf'):
    print(-1)
else:
    print(coin_change(7, coins))
